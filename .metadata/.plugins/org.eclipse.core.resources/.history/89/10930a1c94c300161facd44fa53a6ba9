package application;

import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import javafx.util.Callback;

public class ManagerScreenController implements Initializable {
	
	public ManagerScreenModel managerModel = new ManagerScreenModel();
	
	// Hold login details of current user 
	private String usernameStr;
	private String passwordStr;
	
	@FXML 
	private Label lblUser;
	@FXML 
	private Button switchToStaffBtn;
	@FXML
	private TableView<Staff> staffTableView;
	@FXML
	private TableColumn<Staff, Integer> staffIdCol;
	@FXML
	private TableColumn<Staff, String> usernameCol;
	@FXML
	private TableColumn<Staff, String> passwordCol;
	@FXML
	private TableColumn<Staff, String> managerColumn;
	@FXML 
	private TextField manageUsernameTxt;
	@FXML
	private TextField managePasswordTxt;
	@FXML
	private TextField manageStaffIdTxt;
	@FXML
	private ComboBox<String> isManagerCB;
	@FXML
	private Button addStaffBtn;
	@FXML
	private Button removeStaffbtn;
	@FXML
	private TextArea manageStaffStatus;
	@FXML
	private ListView<Food> managerMenuListView;
	@FXML
	private TextField manageItemNameTxt;
	@FXML
	private TextField manageItemCostTxt;
	@FXML
	private Button addItemBtn;
	@FXML
	private Button removeItemBtn;
	@FXML
	private TextArea manageMenuStatus;
	@FXML
	private ListView<Staff> staffUsernameListView;
	@FXML 
	private Button searchSelectedActivityBtn;
	@FXML
	private TableView<ActivityLog> activityLogTableView;
	
	// variables for the staff table
	private ObservableList<Staff> staffTableViewObsList;
	// variables for the editable food list
	private ObservableList<Food> editableMenuObsList;
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
		// Set up the TableView first
		staffTableViewObsList = FXCollections.observableArrayList();
		staffIdCol.setCellValueFactory(new PropertyValueFactory<Staff, Integer>("staffID"));
		usernameCol.setCellValueFactory(new PropertyValueFactory<Staff, String>("username"));
		passwordCol.setCellValueFactory(new PropertyValueFactory<Staff, String>("password"));
		managerColumn.setCellValueFactory(new PropertyValueFactory<Staff, String>("isManager"));
		
		staffTableViewObsList.addAll(managerModel.getAllEmployeesFromDB());
		
		staffTableView.setItems(staffTableViewObsList);
		
		// Set up the ComboBox for giving manager status
		ObservableList<String> isManagerComboBoxObsList = FXCollections.observableArrayList("true",
				"false");
		
		isManagerCB.setItems(isManagerComboBoxObsList);
		
		addStaffBtn.setDisable(true); // disable the add until the ComboBox is selected
		
		// Set up the editable menu
		
		editableMenuObsList = FXCollections.observableArrayList();
		managerMenuListView.setCellFactory(new Callback<ListView<Food>, ListCell<Food>>() {
			@Override
			public ListCell<Food> call(ListView<Food> p) {
				ListCell<Food> cell = new ListCell<Food>() {
					@Override
					protected void updateItem(Food f, boolean bool) {
						super.updateItem(f, bool);
						if (f != null) {
							DecimalFormat df = new DecimalFormat("#.00");
							// to print the price to 2dp i.e. to the nearest
							// penny
							setText(f.getMenuItemName() + " : Â£" + df.format(f.getPrice()));
						} else {
							setText(null);
						}
					}
				};

				return cell;
			}
		});
		editableMenuObsList.addAll(managerModel.getAllFoodFromMenu());
		managerMenuListView.setItems(editableMenuObsList);
		
		// set up the staff name ListView
		
		staffUsernameListView.setCellFactory(new Callback<ListView<Staff>, ListCell<Staff>>() {
			@Override
			public ListCell<Staff> call(ListView<Staff> p) {
				ListCell<Staff> cell = new ListCell<Staff>() {
					@Override
					protected void updateItem(Staff s, boolean bool) {
						super.updateItem(s, bool);
						if (s != null) {
							setText(s.getUsername());
						} else {
							setText(null);
						}
					}
				};

				return cell;
			}
		});
		staffUsernameListView.setItems(staffTableViewObsList);
	}
		
	
	// Handle managing staff accounts
	
	public void enableAddAccount() {
		addStaffBtn.setDisable(false);
		// System.out.println(isManagerCB.getValue());
	}
	
	public void addNewStaffAccount() {
		
		String newUsername = manageUsernameTxt.getText();
		String newPassword = managePasswordTxt.getText();
		int newStaffID = Integer.parseInt(manageStaffIdTxt.getText());
		String managerLevel = isManagerCB.getValue().toString();
		
		// check that there are username and password entered that aren't empty
		// check that the id is an int greater than 0
		if (newUsername != "" && newPassword != "" && newStaffID > 0) {
			System.out.println("Valid fields entered");
			managerModel.AddStaffAccountIntoDB(newStaffID, newUsername, newPassword, managerLevel);
			staffTableViewObsList.clear();
			staffTableViewObsList.addAll(managerModel.getAllEmployeesFromDB());
			staffTableView.setItems(staffTableViewObsList);
			manageStaffStatus.setText("Account saved into database");
			saveActivityLog("Created/Updated an account: " + newUsername);
			staffUsernameListView.setItems(staffTableViewObsList);
		} else {
			manageStaffStatus.setText("Please fill all the fields before trying to add a new staff account");
		}
	}
	
	public void deletedSelectedAccount() {
		if  (staffTableView.getSelectionModel().getSelectedItem() == null ) { 
			manageStaffStatus.setText("No staff account selected, please select a row from the table.");
		} else {
			
			Staff staffToDelete = staffTableView.getSelectionModel().getSelectedItem();
			int targetID = staffToDelete.getStaffID();
			String targetUser = staffToDelete.getUsername();
			String targetPass = staffToDelete.getPassword();
			String targetIsManager = staffToDelete.getIsManager();
			managerModel.DeleteStaffAccountFromDB(targetID, targetUser, targetPass, targetIsManager);
			staffTableViewObsList.clear();
			staffTableViewObsList.addAll(managerModel.getAllEmployeesFromDB());
			staffTableView.setItems(staffTableViewObsList);
			saveActivityLog("Removed a staff account from the records : " +  targetUser);
			staffUsernameListView.setItems(staffTableViewObsList);
		}
	}
	
	// View activity logs
	
	public void getSelectedEmployeeActivity() {
		
	}
	
	// =========================== Handle editing menu ===================================
	
	public void saveNewDishToMenu() {
		try {
			String newItemName = manageItemNameTxt.getText();
			double newItemPrice = Double.parseDouble(manageItemCostTxt.getText());
			// carry on if name isn't an empty string or if the price is not a
			// negative double

			if (newItemName != "" && newItemPrice > 0.0) {
				managerModel.AddNewDishToMenuDB(newItemName, newItemPrice);
				editableMenuObsList.clear();
				editableMenuObsList.addAll(managerModel.getAllFoodFromMenu());
				managerMenuListView.setItems(editableMenuObsList);
				manageMenuStatus.setText("New dish added.");
				saveActivityLog("Created/Updated a dish: " + newItemName);
			} else {
				manageMenuStatus
						.setText("Invalid dish fields entered, please enter a normal name and a reasonable price");
			}
		} catch (NumberFormatException e) {
			manageMenuStatus.setText("Invalid name or price entered");
		}
	}
	
	public void DeleteDishFromMenu() {
		if (managerMenuListView.getSelectionModel().getSelectedItem() == null) {
			manageMenuStatus.setText("No item was selected from the menu, please click a row from the list and"
					+ " press delete again to remove it from the system");
		} else { 
			Food foodToDelete = managerMenuListView.getSelectionModel().getSelectedItem();
			String targetFoodName = foodToDelete.getMenuItemName();
			Double targetFoodPrice = foodToDelete.getPrice();
			managerModel.DeleteDishFromMenuDB(targetFoodName, targetFoodPrice);
			editableMenuObsList.clear();
			editableMenuObsList.addAll(managerModel.getAllFoodFromMenu());
			managerMenuListView.setItems(editableMenuObsList);
			manageMenuStatus.setText("Dish was removed.");
			saveActivityLog("Removed a dish from the menu: " + targetFoodName);
		}
	}
	
	// ======================= Log outs etc switching screens etc ========================
	
	void GetUser(String user) {
		lblUser.setText(user);
		//System.out.println(user);
	}
	
	void StoreTemporaryCredentials(String user, String pw) {
		usernameStr = user;
		passwordStr = pw;
	}
	
	// to allow manager to use staff screen no verification needed from this direction
	public void SwitchToStaffScreen(ActionEvent event) {
		try {
			((Node)event.getSource()).getScene().getWindow().hide();
			Stage primaryStage = new Stage();
			FXMLLoader loader = new FXMLLoader();
			Pane root = loader.load(getClass().getResource("/application/StaffScreen.fxml").openStream());
			StaffScreenController staffController = (StaffScreenController)loader.getController();
			staffController.GetUser(usernameStr);
			staffController.StoreTemporaryCredentials(usernameStr, passwordStr);
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (Exception e) {
			System.err.println("Exception Caught");
			e.printStackTrace();
		}
	}
	
	public void SignOut(ActionEvent event) {
		try {
			saveActivityLog("Logged out");
			LoginController.currentUser = null; // no user logged in now
			((Node)event.getSource()).getScene().getWindow().hide();
			Stage primaryStage = new Stage();
			FXMLLoader loader = new FXMLLoader();
			Pane root = loader.load(getClass().getResource("/application/Login.fxml").openStream());
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
			
			// switch current user global variable to none for logging activity purposes
			
		} catch (Exception e) {
			System.err.println("Exception Caught");
			e.printStackTrace();
		}
	}
	
	public void saveActivityLog(String activity) {
		Date timeObject = new Date();
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		String dateStr = dateFormat.format(timeObject);
		managerModel.saveActivityEntryToDB(LoginController.currentUser, activity, dateStr);
	}
}